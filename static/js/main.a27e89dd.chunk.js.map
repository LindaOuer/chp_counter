{"version":3,"sources":["constants/actions-types.js","reducers/index.js","store/index.js","Components/Counter.jsx","actions/index.js","App.jsx","serviceWorker.js","index.js"],"names":["INCREASE_COUNT","DECREASE_COUNT","initialState","count","rootReducer","state","arguments","length","undefined","action","type","store","createStore","ConnectedCounter","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","event","console","log","id","target","value","increaseCount","decreaseCount","setState","react_default","a","createElement","className","onClick","Component","Counter","connect","dispatch","App","Components_Counter","Boolean","window","location","hostname","match","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uNAAaA,EAAiB,iBACjBC,EAAiB,iBCCxBC,EAAe,CACnBC,MAAO,GAgBMC,MAdf,WAAmD,IAA9BC,EAA8BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBJ,EAAcO,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACjD,OAAIC,EAAOC,OAASV,EACX,CACLG,MAAOE,EAAMF,MAAQ,GAGrBM,EAAOC,OAAST,EACX,CACLE,MAAOE,EAAMF,MAAQ,GAIlBE,GCbMM,EAFDC,YAAYR,0DCS1B,IAMMS,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDT,MAAQ,CACXF,MAAOW,EAAMX,OAEfY,EAAKO,YAAcP,EAAKO,YAAYC,KAAjBP,OAAAQ,EAAA,EAAAR,CAAAD,IALFA,2EAOPU,GACVC,QAAQC,IAAI,UADK,IAEXC,EAAOH,EAAMI,OAAbD,GACFE,EAAQZ,KAAKb,MAAMF,MAEZ,QAAPyB,GACFV,KAAKJ,MAAMiB,cAAcD,GAGhB,QAAPF,GACFV,KAAKJ,MAAMkB,cAAcF,GAG3BZ,KAAKe,SAAS,CAAE9B,MAAO2B,qCAGhB,IACD3B,EAAUe,KAAKJ,MAAfX,MAEN,OACE+B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,UACEC,UAAU,0BACVT,GAAG,MACHU,QAASpB,KAAKI,aAHhB,KAOAY,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,aAAKjC,EAAL,KACA+B,EAAAC,EAAAC,cAAA,UACEC,UAAU,0BACVT,GAAG,MACHU,QAASpB,KAAKI,aAHhB,aAvCuBiB,aAwDhBC,EALCC,YAzDQ,SAAApC,GACtB,MAAO,CACLF,MAAOE,EAAMF,QATjB,SAA4BuC,GAC1B,MAAO,CACLX,cAAe,SAAA5B,GAAK,OAAIuC,ECHnB,CAAEhC,KAAMV,EAAgB8B,MDGkB3B,KAC/C6B,cAAe,SAAA7B,GAAK,OAAIuC,ECAnB,CAAEhC,KAAMT,EAAgB6B,MDAkB3B,OA6DnCsC,CAGd5B,GE5Da8B,SANH,kBACVT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACQ,EAAD,SCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,iBACEhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAUxC,MAAOA,GACfuB,EAAAC,EAAAC,cAACgB,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a27e89dd.chunk.js","sourcesContent":["export const INCREASE_COUNT = \"INCREASE_COUNT\";\r\nexport const DECREASE_COUNT = \"DECREASE_COUNT\";\r\n","import { INCREASE_COUNT, DECREASE_COUNT } from \"../constants/actions-types\";\r\n\r\nconst initialState = {\r\n  count: 0\r\n};\r\nfunction rootReducer(state = initialState, action) {\r\n  if (action.type === INCREASE_COUNT) {\r\n    return {\r\n      count: state.count + 1\r\n    };\r\n  }\r\n  if (action.type === DECREASE_COUNT) {\r\n    return {\r\n      count: state.count - 1\r\n    };\r\n  }\r\n\r\n  return state;\r\n}\r\nexport default rootReducer;\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"../reducers/index\";\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { increaseCount, decreaseCount } from \"../actions\";\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    increaseCount: count => dispatch(increaseCount(count)),\r\n    decreaseCount: count => dispatch(decreaseCount(count))\r\n  };\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    count: state.count\r\n  };\r\n};\r\n\r\nclass ConnectedCounter extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      count: props.count\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n  handleClick(event) {\r\n    console.log(\"tapped\");\r\n    let { id } = event.target;\r\n    let value = this.state.count;\r\n\r\n    if (id === \"Inc\") {\r\n      this.props.increaseCount(value);\r\n    }\r\n\r\n    if (id === \"Dec\") {\r\n      this.props.decreaseCount(value);\r\n    }\r\n\r\n    this.setState({ count: value });\r\n  }\r\n\r\n  render() {\r\n    let { count } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <p> Counter</p>\r\n        <button\r\n          className=\"btn btn-outline-primary\"\r\n          id=\"Inc\"\r\n          onClick={this.handleClick}\r\n        >\r\n          +\r\n        </button>\r\n        <br />\r\n        <p> {count} </p>\r\n        <button\r\n          className=\"btn btn-outline-primary\"\r\n          id=\"Dec\"\r\n          onClick={this.handleClick}\r\n        >\r\n          -\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst Counter = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ConnectedCounter);\r\n\r\nexport default Counter;\r\n","import { INCREASE_COUNT, DECREASE_COUNT } from \"../constants/actions-types\";\r\n\r\nexport function increaseCount(value) {\r\n  return { type: INCREASE_COUNT, value };\r\n}\r\n\r\nexport function decreaseCount(value) {\r\n  return { type: DECREASE_COUNT, value };\r\n}\r\n","import React from \"react\";\nimport Counter from \"./Components/Counter.jsx\";\n\nimport \"./App.css\";\n\nconst App = () => (\n  <div className=\"App\">\n    <Counter />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}